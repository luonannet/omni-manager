// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc1
// source: imageStatus.proto

package image_monitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallCenterClient is the client API for CallCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallCenterClient interface {
	PushMsgToClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	PullFromDispatcher(ctx context.Context, in *DispatcherRequest, opts ...grpc.CallOption) (*DispatcherResponse, error)
}

type callCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewCallCenterClient(cc grpc.ClientConnInterface) CallCenterClient {
	return &callCenterClient{cc}
}

func (c *callCenterClient) PushMsgToClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, "/CallCenter/PushMsgToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callCenterClient) PullFromDispatcher(ctx context.Context, in *DispatcherRequest, opts ...grpc.CallOption) (*DispatcherResponse, error) {
	out := new(DispatcherResponse)
	err := c.cc.Invoke(ctx, "/CallCenter/PullFromDispatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallCenterServer is the server API for CallCenter service.
// All implementations must embed UnimplementedCallCenterServer
// for forward compatibility
type CallCenterServer interface {
	PushMsgToClient(context.Context, *ClientRequest) (*ClientResponse, error)
	PullFromDispatcher(context.Context, *DispatcherRequest) (*DispatcherResponse, error)
	mustEmbedUnimplementedCallCenterServer()
}

// UnimplementedCallCenterServer must be embedded to have forward compatible implementations.
type UnimplementedCallCenterServer struct {
}

func (UnimplementedCallCenterServer) PushMsgToClient(context.Context, *ClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsgToClient not implemented")
}
func (UnimplementedCallCenterServer) PullFromDispatcher(context.Context, *DispatcherRequest) (*DispatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFromDispatcher not implemented")
}
func (UnimplementedCallCenterServer) mustEmbedUnimplementedCallCenterServer() {}

// UnsafeCallCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallCenterServer will
// result in compilation errors.
type UnsafeCallCenterServer interface {
	mustEmbedUnimplementedCallCenterServer()
}

func RegisterCallCenterServer(s grpc.ServiceRegistrar, srv CallCenterServer) {
	s.RegisterService(&CallCenter_ServiceDesc, srv)
}

func _CallCenter_PushMsgToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCenterServer).PushMsgToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCenter/PushMsgToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCenterServer).PushMsgToClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallCenter_PullFromDispatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallCenterServer).PullFromDispatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CallCenter/PullFromDispatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallCenterServer).PullFromDispatcher(ctx, req.(*DispatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallCenter_ServiceDesc is the grpc.ServiceDesc for CallCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CallCenter",
	HandlerType: (*CallCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMsgToClient",
			Handler:    _CallCenter_PushMsgToClient_Handler,
		},
		{
			MethodName: "PullFromDispatcher",
			Handler:    _CallCenter_PullFromDispatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imageStatus.proto",
}
